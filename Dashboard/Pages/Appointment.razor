@page "/appointment"
@using AutoMapper;
@inject IHttpClientFactory _Http
@inject IMapper _mapper
<PageTitle>Appointment</PageTitle>

<h3>Appointment</h3>
@if (string.IsNullOrWhiteSpace(error) == false)
{
    <div class="h2">@error</div>
}else if(appointment is null)
{
    <div class="h4">Loading....</div>
}
else
{
    <table class="table table-striped">
        <thead class="thead-dark">

            <tr>
                <th>Id</th>
                <th>DateTime</th>
                <th>Status</th>
                <th>ServiceId</th>
                <th>UserId</th>
                <th>EmployeeId</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var b in appointment.Appoinments){
            <tr>
                <td>b.Id</td>
                <td>b.DateTime</td>
                <td>b.Status</td>
                <td>b.ServiceId</td>
                <td>b.UserID</td>
                <td>b.EmployeeId</td>
            </tr>}
        </tbody>
    </table>
}

@code {
    Appontment appointment;
    string error;
    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get,"http://yihea20-001-site1.ftempurl.com/api/Appointment");
        var client = _Http.CreateClient();
        HttpResponseMessage respons = await client.SendAsync(request);
        if (respons.IsSuccessStatusCode)
        {
            var json = await respons.Content.ReadFromJsonAsync<Appontment>();
            var result=
            appointment = json;
            error = null;
        }
        else
        {
            error = $"There was an error getting our Appointment :{respons.ReasonPhrase}";
        }
    }

}

